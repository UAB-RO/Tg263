@page "/"
@using Tg263.Toolkit
@using System.Collections.Generic
@using Tg263.Toolkit.Helpers

<PageTitle>UAB | TG 263 Structure Label Validator</PageTitle>

<div class="container mt-4">
    <h1>UAB TG 263 Structure Label Validator</h1>
    <p class="lead">Enter a structure label to validate against TG 263 standards</p>

    <div class="row mt-4">
        <div class="col-md-8">
            <div class="input-group mb-3">
                <input type="text" class="form-control form-control-lg" 
                       placeholder="Enter structure label (e.g., PTV1_A_Aorta)" 
                       @oninput="(e) => OnInputChange(e)"
                       value="@structureLabel" />
                <div class="input-group-append" style="margin-left: 10px;">
                    @if (isValidating)
                    {
                        <span class="input-group-text">
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="sr-only">Validating...</span>
                            </div>
                        </span>
                    }
                    else if (parseResult != null && parseResult.IsValid)
                    {
                        <span class="input-group-text bg-success text-white">
                            <i class="bi bi-check-circle-fill"></i>
                        </span>
                    }
                    else if (!string.IsNullOrWhiteSpace(structureLabel))
                    {
                        <span class="input-group-text bg-danger text-white">
                            <i class="bi bi-exclamation-circle-fill"></i>
                        </span>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (parseResult != null)
    {
        <div class="row mt-3">
            <div class="col-md-8">
                @if (!parseResult.IsValid)
                {
                    <div class="alert alert-danger">
                        <strong>Invalid Structure Label:</strong> @parseResult.ValidationMessage
                    </div>
                }
                else
                {
                    <div class="alert alert-success">
                        <strong>Valid Structure Label</strong>
                    </div>
                    
                    <h3>Structure Components</h3>
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Component</th>
                                    <th>Value</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    int index = 0;
                                }
                                @foreach (var part in parseResult.StructureParts)
                                {
                                    var delay = 100 * index++;
                                    <tr class="animate-item" style="animation-delay: @(delay)ms">
                                        <td><strong>@part.Key</strong></td>
                                        <td>@part.Value</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .animate-item {
        animation: fadeInDown 0.6s ease-out forwards;
        opacity: 0;
    }

    @@keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

@code {
    private string? structureLabel;
    private ParseResult? parseResult;
    private bool isValidating = false;

    protected override void OnInitialized()
    {
        // Initialize with empty state
    }

    private void ValidateStructureLabel(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            parseResult = null;
            return;
        }

        isValidating = true;
        parseResult = StructureParser.Parse(value);
        isValidating = false;
    }

    private void OnInputChange(ChangeEventArgs e)
    {
        string? value = e.Value?.ToString();
        structureLabel = value;
        if (value != null)
        {
            ValidateStructureLabel(value);
        }
        StateHasChanged();
    }
}